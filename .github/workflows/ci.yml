name: CI

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 15 * * 0,4' # Every Monday and Friday at 00:00 JST

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: Install dependencies (linux)
        run: |
          sudo apt-get update
          sudo apt-get install xorg-dev libglu1-mesa-dev
        if: startsWith(matrix.os, 'ubuntu')
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >>"${GITHUB_ENV}"
        if: contains(matrix.target, '-windows-msvc')
      # https://doc.rust-lang.org/rustc/platform-support.html
      - run: echo "MACOSX_DEPLOYMENT_TARGET=10.12" >>"${GITHUB_ENV}"
        if: matrix.target == 'x86_64-apple-darwin'
      - run: echo "MACOSX_DEPLOYMENT_TARGET=11.0" >>"${GITHUB_ENV}"
        if: matrix.target == 'aarch64-apple-darwin'

      - run: cargo fmt --all --check
      - run: cargo clippy --all-features --all-targets
      - run: cargo hack build --feature-powerset
      - run: cargo test --all-features
      - run: cargo build --release
      # For debugging
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: target/release/urdf-viz*

  wasm:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          # TODO: Pin to 1.81 due to https://github.com/webpack/webpack/issues/15566
          toolchain: '1.81'
          targets: wasm32-unknown-unknown
      - name: Install wasm-pack
        uses: taiki-e/install-action@wasm-pack
      - run: cargo build --target wasm32-unknown-unknown --lib
      - run: cargo build --target wasm32-unknown-unknown -p urdf-viz-wasm
      - name: Build wasm example
        run: npm install && npm run build
        env:
          CARGO_PROFILE_DEV_OPT_LEVEL: 3
          NODE_OPTIONS: --openssl-legacy-provider
        working-directory: examples/wasm
      - name: Deploy to gh-pages
        run: |
          cd examples/wasm/dist
          git init
          git add .
          git -c user.name='ci' -c user.email='ci' commit -m 'Deploy urdf-viz to gh-pages'
          git push -f -q https://git:${{ secrets.github_token }}@github.com/${{ github.repository }} HEAD:gh-pages
        if: github.event_name == 'push' && github.event.ref == 'refs/heads/main' && github.repository_owner == 'openrr'

  deny:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@cargo-deny
      # Workaround for https://github.com/EmbarkStudios/cargo-deny/issues/413
      - uses: taiki-e/install-action@cargo-no-dev-deps
      - run: cargo no-dev-deps deny --workspace --all-features check

  spell-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - run: echo "REMOVE_UNUSED_WORDS=1" >>"${GITHUB_ENV}"
        if: github.repository_owner == 'openrr' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - run: tools/spell-check.sh
      - id: diff
        run: |
          set -euo pipefail
          git config user.name "Taiki Endo"
          git config user.email "taiki@smilerobotics.com"
          git add -N .github/.cspell
          if ! git diff --exit-code -- .github/.cspell; then
            git add .github/.cspell
            git commit -m "Update cspell dictionary"
            echo 'success=false' >>"${GITHUB_OUTPUT}"
          fi
        if: github.repository_owner == 'openrr' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - uses: peter-evans/create-pull-request@v7
        with:
          title: Update cspell dictionary
          body: |
            Auto-generated by [create-pull-request][1]
            [Please close and immediately reopen this pull request to run CI.][2]

            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#workarounds-to-trigger-further-workflow-runs
          branch: update-cspell-dictionary
        if: github.repository_owner == 'openrr' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'
